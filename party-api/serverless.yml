service: party-api

plugins:
   - serverless-appsync-plugin
   - serverless-pseudo-parameters
   - serverless-stack-output

# 1. layers? knex as a layer?
# 2. include layer node_modules
# 3. pass db user/pwd as env vars or config file? example?
# package:
#   exclude:
#     - node_modules/**
#   include:
#     - node-postgres/**

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: ${opt:region, 'us-east-1'}

functions:
  getAuthors:
    handler: src/functions/authors/getAuthors.getAuthors
  getBooks:
    handler: src/functions/books/getBooks.getBooks
  getCountries:
    handler: src/functions/country/getCountries.getCountries
    layers:
      - {Ref: NodePostgresLambdaLayer}
  getMajorGenres:
    handler: src/functions/genre/getMajorGenres.getMajorGenres
  getMinorGenres:
    handler: src/functions/genre/getMinorGenres.getMinorGenres  
    
layers:
  nodePostgres:
    path: resources/layers/node-postgres

custom:
  accountId: #{AWS::AccountId}  
  stage: ${opt:stage, 'dev'}
  output:
    file: ../client/src/stack.json
  appSync:
    name: ${self:service}-${self:custom.stage}    
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:  { Ref: CognitoUserPool } 
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    defaultMappingTemplates: # default templates. Useful for Lambda templates that are often repetitive. Will be used if the template is not specified in a resolver      
      # respone: false # my.response.template.tpl # or e.g.: false for Direct lambdas
      request: false # my.request.template.tpl # or, e.g: false for Direct lambdas
    mappingTemplates:      
      - dataSource: getAuthorsDS
        type: Query #Query, Mutation, Subscription
        field: authors
        response: false # this is weird - defaultMappingTemplates.request value is pulled correctly, 
        # however defaultMappingTemplates.response is not pulled and i have to set it explicitly
      - dataSource: getBooksDS
        type: Query
        field: books        
        response: false
      - dataSource: getCountriesDS
        type: Query
        field: countries        
        response: false
      - dataSource: getMajorGenresDS
        type: Query
        field: majorGenres        
        response: false
      - dataSource: getMinorGenresDS
        type: Query
        field: minorGenres        
        response: false
    schema: schema.graphql
    dataSources:      
      - type: AWS_LAMBDA
        name: getAuthorsDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetAuthorsLambdaFunction", Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getBooksDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetBooksLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getCountriesDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetCountriesLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getMajorGenresDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetMajorGenresLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getMinorGenresDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetMinorGenresLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }


resources:
  - ${file(resources/roles.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/outputs.yml)}