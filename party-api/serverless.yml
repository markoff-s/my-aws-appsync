# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: party-api

plugins:
   - serverless-appsync-plugin
   - serverless-pseudo-parameters
   - serverless-stack-output

# lambda layers
# https://epsagon.com/development/aws-lambda-layers-getting-started-guide/#:~:text=Lambda%20Layers%20are%20a%20pretty,and%20managed%20by%20third%20parties
# https://www.serverless.com/framework/docs/providers/aws/guide/layers/
# 1. layers? knex as a layer?
# 2. include layer node_modules
# NOTE: I wasn't able to exclude party-api node_modules and include node-postgres layer node_modules,
# all or nothing is included
# package:
#   exclude:
#     - node_modules/**
#   include:
#     - node-postgres/**

package:
  exclude:
    - node_modules/**

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: ${opt:region, 'us-east-1'}
  role: { Fn::GetAtt: [LambdaDefaultExecutionRole, Arn] }
  environment: # Service wide environment variables
    USER: ${self:custom.dbCreds.username}
    PASSWORD: ${self:custom.dbCreds.password}
    HOST: ${self:custom.dbCreds.host}
    PORT: ${self:custom.dbCreds.port}
    DATABASE: ${self:custom.dbCreds.dbname}
    NODE_PATH: "./:/opt/node_modules"

functions:
  # country   
  getCountries:
    handler: src/functions/country/getCountries.getCountries    
    layers:
      # - {Ref: NodePostgresLambdaLayer}
      - ${self:custom.lambdaLayers.nodePostgres}
  getCountry:
    handler: src/functions/country/getCountry.getCountry    
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  getCountriesBatch:
    handler: src/functions/country/getCountriesBatch.getCountriesBatch
    layers:
      # - {Ref: NodePostgresLambdaLayer}
      - ${self:custom.lambdaLayers.nodePostgres}
  
  # genres
  getMajorGenres:
    handler: src/functions/genre/getMajorGenres.getMajorGenres
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  getMinorGenres:
    handler: src/functions/genre/getMinorGenres.getMinorGenres
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  
  # artist
  getArtists:
    handler: src/functions/artist/getArtists.getArtists
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  getArtist:
    handler: src/functions/artist/getArtist.getArtist
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  createArtist:
    handler: src/functions/artist/createArtist.createArtist
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  updateArtist:
    handler: src/functions/artist/updateArtist.updateArtist
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  deleteArtist:
    handler: src/functions/artist/deleteArtist.deleteArtist
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  
  # group
  getGroups:
    handler: src/functions/group/getGroups.getGroups
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  getGroup:
    handler: src/functions/group/getGroup.getGroup
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  createGroup:
    handler: src/functions/group/createGroup.createGroup
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  updateGroup:
    handler: src/functions/group/updateGroup.updateGroup
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
  deleteGroup:
    handler: src/functions/group/deleteGroup.deleteGroup
    layers:      
      - ${self:custom.lambdaLayers.nodePostgres}
    
# layers:
#   nodePostgres:
#     path: resources/layers/node-postgres

custom:
  accountId: #{AWS::AccountId}  
  stage: ${opt:stage, 'dev'}
  lambdaLayers:
    # this layer is stored in Slava's account and is globally shared https://medium.com/@zaccharles/sharing-lambda-layers-and-restricting-your-own-usage-f1413b974f44
    nodePostgres: arn:aws:lambda:us-east-1:454247646323:layer:NodePostgresLayer:2 # arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:NodePostgresLayer:2
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables/#reference-variables-using-aws-secrets-manager
  dbCreds: ${ssm:/aws/reference/secretsmanager/mydb-postgres~true}
  output:
    file: ../client/src/stack.json
  appSync:
    name: ${self:service}-${self:custom.stage}    
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId:  { Ref: CognitoUserPool } 
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    defaultMappingTemplates: # default templates. Useful for Lambda templates that are often repetitive. Will be used if the template is not specified in a resolver      
      # respone: false # my.response.template.tpl # or e.g.: false for Direct lambdas
      request: false # my.request.template.tpl # or, e.g: false for Direct lambdas
    mappingTemplates:                  
      # country
      - dataSource: getCountriesDS
        type: Query
        field: countries        
        response: false # this is weird - defaultMappingTemplates.request value is pulled correctly, 
        # however defaultMappingTemplates.response is not pulled and i have to set it explicitly
      - dataSource: getCountryDS
        type: Query
        field: country  
        response: false
      - dataSource: getCountriesBatchDS
        type: Person
        field: country          
        request: country/person.country.request.vtl # request mapping template name | defaults to `defaultMappingTemplates.request` or {type}.{field}.request.vtl
        response: false
      
      # genres
      - dataSource: getMajorGenresDS
        type: Query
        field: majorGenres        
        response: false
      - dataSource: getMinorGenresDS
        type: Query
        field: minorGenres        
        response: false
      
      # artist
      - dataSource: getArtistsDS
        type: Query
        field: artists        
        response: false
      - dataSource: getArtistDS
        type: Query
        field: artist
        response: false
      - dataSource: createArtistDS
        type: Mutation
        field: createArtist
        response: false
      - dataSource: updateArtistDS
        type: Mutation
        field: updateArtist
        response: false
      - dataSource: deleteArtistDS
        type: Mutation
        field: deleteArtist
        response: false
      
      # group
      - dataSource: getGroupsDS
        type: Query
        field: groups  
        response: false
      - dataSource: getGroupDS
        type: Query
        field: group
        response: false      
      - dataSource: createGroupDS
        type: Mutation
        field: createGroup
        response: false
      - dataSource: updateGroupDS
        type: Mutation
        field: updateGroup
        response: false
      - dataSource: deleteGroupDS
        type: Mutation
        field: deleteGroup
        response: false
    schema: schema.graphql
    dataSources:      
      # country      
      - type: AWS_LAMBDA
        name: getCountriesDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetCountriesLambdaFunction", Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }      
      - type: AWS_LAMBDA
        name: getCountryDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetCountryLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getCountriesBatchDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetCountriesBatchLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      
      # genres
      - type: AWS_LAMBDA
        name: getMajorGenresDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetMajorGenresLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getMinorGenresDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetMinorGenresLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      
      # artist
      - type: AWS_LAMBDA
        name: getArtistsDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetArtistsLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getArtistDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetArtistLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: createArtistDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["CreateArtistLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: updateArtistDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["UpdateArtistLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: deleteArtistDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["DeleteArtistLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      
      # group
      - type: AWS_LAMBDA
        name: getGroupsDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetGroupsLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: getGroupDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["GetGroupLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: createGroupDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["CreateGroupLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: updateGroupDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["UpdateGroupLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: deleteGroupDS
        config:
          lambdaFunctionArn: { Fn::GetAtt: ["DeleteGroupLambdaFunction", Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }


resources:
  - ${file(resources/roles.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/outputs.yml)}